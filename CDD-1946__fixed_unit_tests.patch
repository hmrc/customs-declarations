Index: app/uk/gov/hmrc/customs/declaration/services/declarationServices.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/uk/gov/hmrc/customs/declaration/services/declarationServices.scala	(date 1544114075000)
+++ app/uk/gov/hmrc/customs/declaration/services/declarationServices.scala	(date 1545129515000)
@@ -178,7 +178,8 @@
 
   protected def logCallDuration[A](startTime: ZonedDateTime)
                                   (implicit hc: HeaderCarrier, vpr: ValidatedPayloadRequest[A]): Unit ={
-    val callDuration = ChronoUnit.MILLIS.between(startTime, dateTimeProvider.zonedDateTimeUtc)
+    val endTime = dateTimeProvider.zonedDateTimeUtc
+    val callDuration = ChronoUnit.MILLIS.between(startTime, endTime)
     logger.info(s"Duration of call to NRS ${callDuration} ms")
   }
 
Index: test/unit/services/DeclarationServiceSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/unit/services/DeclarationServiceSpec.scala	(date 1544114075000)
+++ test/unit/services/DeclarationServiceSpec.scala	(date 1545129515000)
@@ -16,7 +16,6 @@
 
 package unit.services
 
-import java.time.ZonedDateTime
 import java.util.UUID
 
 import akka.actor.ActorSystem
@@ -32,12 +31,13 @@
 import uk.gov.hmrc.customs.declaration.logging.DeclarationsLogger
 import uk.gov.hmrc.customs.declaration.model._
 import uk.gov.hmrc.customs.declaration.model.actionbuilders.ActionBuilderModelHelper._
-import uk.gov.hmrc.customs.declaration.model.actionbuilders.ValidatedPayloadRequest
+import uk.gov.hmrc.customs.declaration.model.actionbuilders.{HasConversationId, ValidatedPayloadRequest}
 import uk.gov.hmrc.customs.declaration.services._
 import uk.gov.hmrc.customs.declaration.xml.MdgPayloadDecorator
 import uk.gov.hmrc.http.{HeaderCarrier, HttpResponse}
 import uk.gov.hmrc.play.test.UnitSpec
 import util.ApiSubscriptionFieldsTestData._
+import util.CustomsDeclarationsMetricsTestData
 import util.MockitoPassByNameHelper.PassByNameVerifier
 import util.TestData._
 
@@ -54,7 +54,7 @@
   private val errorResponseServiceUnavailable = errorInternalServerError("This service is currently unavailable")
 
   trait SetUp {
-    protected val mockLogger: DeclarationsLogger = mock[DeclarationsLogger]/*new DeclarationsLogger(TestData.mockCdsLogger)*/
+    protected val mockLogger: DeclarationsLogger = mock[DeclarationsLogger]
     protected val mockMdgDeclarationConnector: MdgDeclarationConnector = mock[MdgDeclarationConnector]
     protected val mockApiSubscriptionFieldsConnector: ApiSubscriptionFieldsConnector = mock[ApiSubscriptionFieldsConnector]
     protected val mockPayloadDecorator: MdgPayloadDecorator = mock[MdgPayloadDecorator]
@@ -81,6 +81,7 @@
 
     when(mockPayloadDecorator.wrap(meq(TestXmlPayload), meq[UUID](subscriptionFieldsId.value).asInstanceOf[SubscriptionFieldsId], any[DateTime])(any[ValidatedPayloadRequest[_]])).thenReturn(wrappedValidXML)
     when(mockDateTimeProvider.nowUtc()).thenReturn(dateTime)
+    when(mockDateTimeProvider.zonedDateTimeUtc).thenReturn(CustomsDeclarationsMetricsTestData.EventStart, CustomsDeclarationsMetricsTestData.EventEnd)
     when(mockMdgDeclarationConnector.send(any[NodeSeq], meq(dateTime), any[UUID], any[ApiVersion])(any[ValidatedPayloadRequest[_]])).thenReturn(Future.successful(mockHttpResponse))
     when(mockApiSubscriptionFieldsConnector.getSubscriptionFields(any[ApiSubscriptionKey])(any[ValidatedPayloadRequest[_]], any[HeaderCarrier])).thenReturn(Future.successful(apiSubscriptionFieldsResponse))
     when(mockNrsService.send(vpr, headerCarrier)).thenReturn(Future.successful(nrSubmissionId))
@@ -91,14 +92,12 @@
       "send transformed xml to connector" in new SetUp() {
 
         val result: Either[Result, Option[NrSubmissionId]] = send()
-
         result shouldBe Right(Some(nrSubmissionId))
         verify(mockMdgDeclarationConnector).send(meq(wrappedValidXML), any[DateTime], any[UUID], any[ApiVersion])(any[ValidatedPayloadRequest[_]])
 
-        val now = ZonedDateTime.now()
-        when(mockDateTimeProvider.zonedDateTimeUtc).thenReturn(now, now.plusSeconds(2))
         PassByNameVerifier(mockLogger, "info")
           .withByNameParam[String]("Duration of call to NRS 2000 ms")
+          .withParamMatcher(any[HasConversationId])
           .verify()
       }
     }
Index: test/unit/services/StandardDeclarationSubmissionServiceSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/unit/services/StandardDeclarationSubmissionServiceSpec.scala	(date 1544114075000)
+++ test/unit/services/StandardDeclarationSubmissionServiceSpec.scala	(date 1545129515000)
@@ -35,6 +35,7 @@
 import uk.gov.hmrc.http.{HeaderCarrier, HttpResponse}
 import uk.gov.hmrc.play.test.UnitSpec
 import util.ApiSubscriptionFieldsTestData._
+import util.CustomsDeclarationsMetricsTestData
 import util.TestData._
 
 import scala.concurrent.Future
@@ -74,6 +75,7 @@
 
     when(mockPayloadDecorator.wrap(meq(TestXmlPayload), meq[UUID](subscriptionFieldsId.value).asInstanceOf[SubscriptionFieldsId], any[DateTime])(any[ValidatedPayloadRequest[_]])).thenReturn(wrappedValidXML)
     when(mockDateTimeProvider.nowUtc()).thenReturn(dateTime)
+    when(mockDateTimeProvider.zonedDateTimeUtc).thenReturn(CustomsDeclarationsMetricsTestData.EventStart, CustomsDeclarationsMetricsTestData.EventEnd)
     when(mockMdgDeclarationConnector.send(any[NodeSeq], meq(dateTime), any[UUID], any[ApiVersion])(any[ValidatedPayloadRequest[_]])).thenReturn(Future.successful(mockHttpResponse))
     when(mockApiSubscriptionFieldsConnector.getSubscriptionFields(any[ApiSubscriptionKey])(any[ValidatedPayloadRequest[_]], any[HeaderCarrier])).thenReturn(Future.successful(apiSubscriptionFieldsResponse))
     when(mockNrsService.send(any[ValidatedPayloadRequest[_]], any[HeaderCarrier])).thenReturn(Future.successful(nrSubmissionId))
